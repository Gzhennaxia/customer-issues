version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: customer-issue-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: customer_issues_db
      MYSQL_USER: customer_issue
      MYSQL_PASSWORD: customer123
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=1000
    networks:
      - customer-issue-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: customer-issue-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ""
    networks:
      - customer-issue-network

  # Chroma向量数据库
  chroma:
    image: chromadb/chroma:latest
    container_name: customer-issue-chroma
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    networks:
      - customer-issue-network

  # 后端服务
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: customer-issue-backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_PASSWORD=root123
      - REDIS_HOST=redis
      - CHROMA_HOST=chroma
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
    ports:
      - "8080:8080"
    volumes:
      - backend_logs:/app/logs
      - upload_files:/app/uploads
    depends_on:
      - mysql
      - redis
      - chroma
    networks:
      - customer-issue-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 前端服务
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: customer-issue-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - customer-issue-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: customer-issue-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - customer-issue-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  backend_logs:
    driver: local
  upload_files:
    driver: local
  nginx_logs:
    driver: local

networks:
  customer-issue-network:
    driver: bridge 